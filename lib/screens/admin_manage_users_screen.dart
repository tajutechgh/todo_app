import 'package:flutter/material.dart';import 'package:get/get.dart';import 'package:todo_app/models/user.dart';import '../services/auth_service.dart';import '../services/user_service.dart';import 'widgets/cascading_menu_widget.dart';class AdminManageUsersScreen extends StatefulWidget {  const AdminManageUsersScreen({super.key});  @override  State<AdminManageUsersScreen> createState() => _AdminManageUsersScreenState();}class _AdminManageUsersScreenState extends State<AdminManageUsersScreen> {  late String? selectedRole;  final TextEditingController nameController = TextEditingController();  final TextEditingController usernameController = TextEditingController();  final TextEditingController emailController = TextEditingController();  final TextEditingController passwordController = TextEditingController();  final TextEditingController roleController = TextEditingController();  final GlobalKey<FormState> _formKey = GlobalKey<FormState>();  bool _isFormLoading = false;  late Future<List<User>>  futureUsers;  bool _loading = true;  String? profileUsername;  String? profileRole;  int? userId;  String? profileName;  String? profileEmail;  String? profilePassword;  bool isLoading = true;  @override  void initState() {    super.initState();    _loadCurrentUserName();    _loadRole();    _refreshUsers();    _loadProfile();  }  Future<void> _loadCurrentUserName() async {    final name = await AuthService.getCurrentUsername();    setState(() {      profileUsername = name;    });  }  Future<void> _loadRole() async {    final currentUserRole = await AuthService.getUserRole();    setState(() {      profileRole = currentUserRole;    });  }  Future<void> _loadProfile() async {    final profile = await UserService.fetchUserProfile();    if (mounted) {      setState(() {        userId = profile?['id'];        profileName = profile?['name'];        profileEmail = profile?['email'];        profilePassword = profile?['password'];        isLoading = false;      });    }  }  void _refreshUsers() {    setState(() {      futureUsers = UserService.fetchAllUsers();      _loading = false;    });  }  // creating and editing dialog function  void showUserDialog({User? user}) {    setState(() {      _isFormLoading = true;    });    // Prepopulate text fields    nameController.text = user?.name ?? "";    usernameController.text = user?.username ?? "";    emailController.text = user?.email ?? "";    passwordController.text = user?.password ?? "";    // Preselect role (default to "USER" if null or empty)    selectedRole = user?.role ?? "ADMIN";    showDialog(context: context, builder: (context) {        return StatefulBuilder(          builder: (context, dialogSetState) {            return Form(              key: _formKey,              child: AlertDialog(                shape: RoundedRectangleBorder(                  borderRadius: BorderRadius.circular(12),                ),                title: Center(                  child: Text(                    user == null ? 'Add User' : 'Edit User',                    style: const TextStyle(                      letterSpacing: 1,                      fontSize: 24,                      fontWeight: FontWeight.bold,                    ),                  ),                ),                content: SingleChildScrollView(                  child: Column(                    mainAxisSize: MainAxisSize.min,                    children: [                      TextFormField(                        controller: nameController,                        decoration:                        const InputDecoration(labelText: 'Enter Name'),                        validator: (value) => value == null || value.isEmpty                            ? 'This field is required'                            : null,                      ),                      const SizedBox(height: 20),                      TextFormField(                        controller: usernameController,                        decoration:                        const InputDecoration(labelText: 'Enter Username'),                        validator: (value) => value == null || value.isEmpty                            ? 'This field is required'                            : null,                      ),                      const SizedBox(height: 20),                      TextFormField(                        controller: emailController,                        decoration:                        const InputDecoration(labelText: 'Enter Email'),                        validator: (value) => value == null || value.isEmpty                            ? 'This field is required'                            : null,                      ),                      const SizedBox(height: 20),                      if(user?.id == null)                      TextFormField(                        controller: passwordController,                        decoration:                        const InputDecoration(labelText: 'Enter Password'),                        validator: (value) => value == null || value.isEmpty                            ? 'This field is required'                            : null,                      ),                      if(user?.id == null)                      const SizedBox(height: 20),                      const Align(                        alignment: Alignment.centerLeft,                        child: Text(                          "Select Role:",                          style: TextStyle(                            fontSize: 17,                          ),                        ),                      ),                      const SizedBox(height: 8),                      RadioGroup<String>(                        groupValue: selectedRole,                        onChanged: (value) {                          dialogSetState(() {                            selectedRole = value;                          });                        },                        child: Row(                          children: [                            Expanded(child: const ListTile(                              title: Text(                                'Admin',                                style: TextStyle(                                    fontSize: 12,                                    fontWeight: FontWeight.bold                                ),                              ),                              leading: Radio<String>(value: "ADMIN"),                            )),                            Expanded(                              child: const ListTile(                                title: Text(                                  'User',                                  style: TextStyle(                                      fontSize: 12,                                      fontWeight: FontWeight.bold,                                  ),                                ),                                leading: Radio<String>(value: "USER"),                              ),                            ),                          ],                        ),                      ),                    ],                  ),                ),                actions: [                  ElevatedButton(                    onPressed: () => Navigator.of(context).pop(),                    style: ElevatedButton.styleFrom(                      backgroundColor: Colors.red,                      foregroundColor: Colors.white,                    ),                    child: const Text('Cancel'),                  ),                  ElevatedButton(                    onPressed: () async {                      if (!_formKey.currentState!.validate()) return;                      final name = nameController.text.trim();                      final username = usernameController.text.trim();                      final email = emailController.text.trim();                      final password = passwordController.text.trim();                      final role = selectedRole;                      if (user == null) {                        String result = await UserService.createUser(                          User.newUser(                            name: name,                            username: username,                            email: email,                            password: password,                            role: role,                          ),                        );                        setState(() => _isFormLoading = false);                        if (result == "Success") {                          Get.snackbar(                            "Create User",                            "You have successfully created new user!",                            backgroundColor: Colors.green,                            colorText: Colors.white,                            margin: EdgeInsets.all(15),                            icon: Icon(Icons.message, color: Colors.white,),                          );                        } else {                          Get.snackbar(                            "Create User",                            "An error occurred while creating user!!",                            backgroundColor: Colors.red,                            colorText: Colors.white,                            snackPosition: SnackPosition.BOTTOM,                            margin: EdgeInsets.all(15),                            icon: Icon(Icons.message, color: Colors.white,),                          );                        }                      } else {                        if (!_formKey.currentState!.validate()) return;                        final name = nameController.text.trim();                        final username = usernameController.text.trim();                        final email = emailController.text.trim();                        final password = passwordController.text.trim();                        final role = selectedRole;                        if (user.id != null) {                          String result = await UserService.updateUser(                            user.id!,                            User.newUser(                              name: name,                              username: username,                              email: email,                              password: password,                              role: role,                            ),                          );                          setState(() => _isFormLoading = false);                          if (result == "Success") {                            Get.snackbar(                              "Update User",                              "You have successfully updated the user!",                              backgroundColor: Colors.green,                              colorText: Colors.white,                              margin: EdgeInsets.all(15),                              icon: Icon(Icons.message, color: Colors.white,),                            );                          } else {                            Get.snackbar(                              "Update User",                              "An error occurred while updating user!!",                              backgroundColor: Colors.red,                              colorText: Colors.white,                              snackPosition: SnackPosition.BOTTOM,                              margin: EdgeInsets.all(15),                              icon: Icon(Icons.message, color: Colors.white,),                            );                          }                        }                      }                      if (context.mounted) {                        Navigator.of(context).pop();                        _refreshUsers();                      }                    },                    style: ElevatedButton.styleFrom(                      backgroundColor: Colors.green,                      foregroundColor: Colors.white,                    ),                    child: Text(user == null ? 'Save User' : 'Update User'),                  ),                ],              ),            );          },        );      },    );  }  // deleting function  Future<void> deleteUser(int? id) async {    if (id == null) return;    await UserService.deleteUser(id);    _refreshUsers();    Get.snackbar(      "Delete User",      "You have successfully deleted this user!",      backgroundColor: Colors.green,      colorText: Colors.white,      margin: EdgeInsets.all(15),      icon: Icon(Icons.message, color: Colors.white,),    );  }  @override  Widget build(BuildContext context) {    return Scaffold(      appBar: AppBar(        iconTheme: IconThemeData(            color: Colors.white        ),        title: Text(          profileUsername != null ? "Welcome Admin, $profileUsername" : "Admin Dashboard",          style: TextStyle(            color: Colors.white,            fontSize: 20,            fontWeight: FontWeight.bold,            letterSpacing: 1,          ),        ),        actions: [          CascadingMenuWidget()        ],        backgroundColor: Colors.purpleAccent,      ),      body: _loading ? const Center(child: CircularProgressIndicator()) : FutureBuilder<List<User>>(        future: futureUsers,        builder: (context, snapshot) {          if (snapshot.connectionState == ConnectionState.waiting) {            return const Center(child: CircularProgressIndicator());          } else if (snapshot.hasError) {            return Center(child: Text('Error: ${snapshot.error}'));          } else if (snapshot.data == null || snapshot.data!.isEmpty) {            return const Center(child: Text('No users found'));          } else {            final users = snapshot.data!;            return ListView.builder(              itemCount: users.length,              itemBuilder: (context, index) {                final user = users[index];                return Card(                  color:   Colors.blueAccent,                  margin: const EdgeInsets.symmetric(horizontal: 6, vertical: 6),                  child: ListTile(                    title: SingleChildScrollView(                        scrollDirection: Axis.horizontal,                        child: Row(                        children: [                          Icon(Icons.person, color: Colors.white,),                          SizedBox(width: 10),                          Text(user.name!,                            style: TextStyle(                                fontSize: 19,                                fontWeight: FontWeight.bold,                                letterSpacing: 1,                                color: Colors.white                            ),                          ),                        ],                    )),                    subtitle: Column(                      crossAxisAlignment: CrossAxisAlignment.start,                      mainAxisSize: MainAxisSize.min,                      children: [                        Row(                          children: [                            Icon(Icons.person_outline_outlined, color: Colors.white,),                            SizedBox(width: 10,),                            Text(user.username!,                              style: TextStyle(                                  fontSize: 18,                                  letterSpacing: 1,                                  color: Colors.white                              ),                            ),                          ],                        ),                        Row(                          children: [                            Icon(Icons.email, color: Colors.white,),                            SizedBox(width: 10,),                            Text(user.email!,                                style: TextStyle(                                    fontSize: 15,                                    letterSpacing: 1,                                    color: Colors.white                                ),                            ),                          ],                        ),                        Row(                          children: [                            Icon(Icons.manage_accounts, color: Colors.white,),                            SizedBox(width: 10,),                            Text(user.role!,                              style: TextStyle(                                  fontSize: 15,                                  letterSpacing: 1,                                  color: Colors.white                              ),                            ),                          ],                        ),                      ],                    ),                    trailing: Row(                      mainAxisSize: MainAxisSize.min,                      children: [                          IconButton(                            icon: const Icon(Icons.edit, color: Colors.green),                            onPressed: () {                              showUserDialog(user: user);                            },                          ),                          IconButton(                            icon: const Icon(Icons.delete, color: Colors.red),                            onPressed: () {                              deleteUser(user.id);                            },                          ),                      ],                    ),                  ),                );              },            );          }        },      ),      floatingActionButton: FloatingActionButton(        onPressed: (){          showUserDialog();        },        backgroundColor: Colors.purpleAccent,        child: Icon(          Icons.add,          color: Colors.white,        ),      ),    );  }}